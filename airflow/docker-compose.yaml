# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME           - Docker image name used to run Airflow.
#                                Default: apache/airflow:2.8.1
# AIRFLOW_UID                  - User ID in Airflow containers
#                                Default: 50000
# AIRFLOW_PROJ_DIR             - Base path to which all the files will be volumed.
#                                Default: .
# Those configurations are useful mostly in case of standalone testing/running Airflow in test/try-out mode
#
# _AIRFLOW_WWW_USER_USERNAME   - Username for the administrator account (if requested).
#                                Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD   - Password for the administrator account (if requested).
#                                Default: airflow
# _PIP_ADDITIONAL_REQUIREMENTS - Additional PIP requirements to add when starting all containers.
#                                Use this option ONLY for quick checks. Installing requirements at container
#                                startup is done EVERY TIME the service is started.
#                                A better way is to build a custom image or extend the official image
#                                as described in https://airflow.apache.org/docs/docker-stack/build.html.
#                                Default: ''
#
# Feel free to modify this file to suit your needs.
version: "3"
services:
  postgres:
    image: postgres:13.0
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    ports:
      - 5432:5432
    volumes:
      - postgres:/var/lib/postgresql/data

  initdb:
    build: .
    depends_on:
      - postgres
    environment: &airflow-common-env
      AIRFLOW_HOME: /root/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__FERNET_KEY: ""
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW_CORE_REMOTE_LOGGING: ${AIRFLOW_CORE_REMOTE_LOGGING}
      AIRFLOW_CORE_REMOTE_BASE_LOG_FOLDER: ${AIRFLOW_CORE_REMOTE_BASE_LOG_FOLDER}
      AIRFLOW_CORE_REMOTE_LOG_CONN_ID: ${AIRFLOW_CORE_REMOTE_BASE_LOG_FOLDER}
      AIRFLOW_CORE_ENCRYPT_S3_LOGS: ${AIRFLOW_CORE_REMOTE_BASE_LOG_FOLDER}
    command: bash -c "airflow db init && airflow users create --firstname admin --lastname admin --email admin --password admin --username admin --role Admin"

  webserver:
    build: .
    depends_on:
      - initdb
    environment:
      <<: *airflow-common-env
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "True"
    volumes:
      - ./dags:/root/airflow/dags
      - ./plugins:/root/airflow/plugins
      - airflow-worker-logs:/root/airflow/logs
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8080:8080"
    command: airflow webserver

  scheduler:
    build: .
    depends_on:
      - webserver
    environment:
      <<: *airflow-common-env
    volumes:
      - ./data:/root/airflow/data
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dags:/root/airflow/dags
      - ./plugins:/root/airflow/plugins
      - airflow-worker-logs:/root/airflow/logs
    command: airflow scheduler

  
volumes:
  postgres: {}
  airflow-worker-logs: